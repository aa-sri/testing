This the document for git commands

* To create a a git repository you have to use below command in project folder
$ git init

* To see the what's happening with your repository you can type
$ git status

* To track the files in your directory you can use 
$ git add file1.txt file2.txt etc
$ git add . [this command will add all files in the directory for tracking]

* Once files or changes have staged we ready to commit them to our repository to that
$ git commit -m "Write your message"

* Once done with commit you have to setup things like email and user name
$ git config --global user.email "you@example.com"
$ git config --global user.name "Your Name"

* If you want unstage a file you can use 
$ git rm --cached <file>... to unstage

* If you want avilable your files to everyone you have to push this into your remote repository for that we have to 
$ git remote add origin "URL of repository from git" 

* To push the changes to your repository enter the command
$ git push origin <branch-name> enter

* To clone a complete repository into your local machine use 
$ git clone <Repository URL>

* Pull command only works After cloning you can use the pull command for latest changes. This is the case when two devlopers working on a project then can use pull command to upto date with each other and with your remote repository use 
$ git pull origin master

* To create a branch we use 
$ git branch <New branch name>

* To delete a branch we use
$ git branch -D <Branch name>

* To list branches we use
$ git branch

* To switch from one branch to other we use
$ git checkout <branch name>

** Here in branch concept if a devloper made some changes to code on his branch if that is correct and approved by lets say another senior developer on master branch then he can merge that code into master branch and make it available for everyone for use.

* git log Command 
If we wants to check teh log for every commit detail in your repository? you can accomplish that by using
$ git log

* git stash and git stash pop
If we wants to save our work without commiting the code? You wants to switch branches but you dont want to save the code to repoistory you can use 
$ git stash
If you want to stash your untracked files also use
$ git stash -u
Once your back and want to work on same code use
$ git stash pop
  
$ git stash (then git add -> file to staged)
$ git stash -u (You can directly put all untracked files into stash)
$ git stash pop (To get the file back from stash stage to available for work)

* Git revert command (Is used to goback or undo to a particular commit by using commit id of git commit)
$ git revert <commitID>

* git diff this command helps us checking the difference between two versions of a file ny using the command
$ git diff <commitID1> <commitID2>














